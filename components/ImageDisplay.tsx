import React from 'react';
import Loader from './Loader';
import { SavedImage } from './SavedGallery';

interface ImageDisplayProps {
  imagesData: SavedImage[];
  isLoading: boolean;
  aspectRatio: '1:1' | '16:9' | '9:16';
  onDownloadClick?: (imageUrl: string) => void;
  onEditClick?: (imageUrl: string) => void;
  onRemoveObjectClick?: (imageUrl: string) => void;
  onRemoveBackground?: (imageUrl: string) => void;
  onUpscale?: (imageUrl: string) => void;
  onAnimateClick?: (imageUrl: string) => void;
  onExpandClick?: (imageUrl: string) => void;
  onSaveToAirtable?: (image: SavedImage) => void;
  airtableConfigured?: boolean;
  savingToAirtableState?: { status: 'idle' | 'saving'; imageId: string | null };
  hideActions?: boolean;
}

const ImageDisplay: React.FC<ImageDisplayProps> = ({ 
    imagesData, isLoading, aspectRatio, 
    onDownloadClick = () => {}, onEditClick = () => {}, onRemoveObjectClick = () => {}, onRemoveBackground = () => {}, onUpscale = () => {}, onAnimateClick = () => {}, onExpandClick = () => {},
    onSaveToAirtable = () => {}, airtableConfigured = false, savingToAirtableState = { status: 'idle', imageId: null },
    hideActions = false 
}) => {
  const getGridColsClass = (count: number) => {
    if (count <= 1) return 'grid-cols-1';
    return 'grid-cols-2';
  }

  const getAspectRatioClass = (ratio: string) => {
    switch (ratio) {
      case '16:9':
        return 'aspect-video';
      case '9:16':
        return 'aspect-[9/16]';
      case '1:1':
      default:
        return 'aspect-square';
    }
  };

  return (
    <div className={`relative w-full ${getAspectRatioClass(aspectRatio)} bg-gray-800 border-2 border-dashed border-gray-700 rounded-lg flex items-center justify-center p-4 transition-all duration-300`}>
      {isLoading ? (
        <Loader />
      ) : imagesData && imagesData.length > 0 ? (
        <div className={`w-full h-full grid ${getGridColsClass(imagesData.length)} gap-4`}>
          {imagesData.map((image, index) => {
            const isSaving = savingToAirtableState.status === 'saving' && savingToAirtableState.imageId === image.id;
            return (
              <div key={image.id || index} className="relative group w-full h-full">
                <img
                  src={image.url}
                  alt={image.title || `Generated by AI ${index + 1}`}
                  className="w-full h-full object-contain rounded-md"
                />
                {!hideActions && (
                  <div className="absolute bottom-2 right-2 flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    {airtableConfigured && (
                       <button
                          onClick={() => onSaveToAirtable(image)}
                          disabled={isSaving}
                          className="bg-blue-600 text-white font-semibold p-2 rounded-full shadow-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-blue-500 transition-all disabled:bg-blue-900 disabled:cursor-not-allowed"
                          aria-label={`Save to Airtable ${index + 1}`}
                          title="Save to Airtable"
                        >
                          {isSaving ? (
                            <svg className="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                          ) : (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z" /></svg>
                          )}
                        </button>
                    )}
                    <button onClick={() => onAnimateClick(image.url)} className="bg-green-600 text-white p-2 rounded-full" title="Animate"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" /><path d="M14.553 7.106A1 1 0 0116 8v4a1 1 0 01-1.447.894L12 11.118V8.882l2.553-1.776z" /></svg></button>
                    <button onClick={() => onExpandClick(image.url)} className="bg-purple-600 text-white p-2 rounded-full" title="Expand"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M3 3a1 1 0 011-1h4a1 1 0 110 2H5v2a1 1 0 11-2 0V4a1 1 0 011-1zm2 10H4a1 1 0 100 2h1v2a1 1 0 102 0v-3a1 1 0 00-1-1zm10-2h1a1 1 0 100-2h-1V9a1 1 0 10-2 0v3a1 1 0 001 1zm-2-8h4a1 1 0 011 1v4a1 1 0 11-2 0V5h-2a1 1 0 110-2z" clipRule="evenodd" /></svg></button>
                    <button onClick={() => onEditClick(image.url)} className="bg-purple-600 text-white p-2 rounded-full" title="Inpaint"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" /><path fillRule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clipRule="evenodd" /></svg></button>
                    <button onClick={() => onDownloadClick(image.url)} className="bg-indigo-600 text-white p-2 rounded-full" title="Download"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clipRule="evenodd" /></svg></button>
                  </div>
                )}
              </div>
            )
          })}
        </div>
      ) : (
        <div className="text-center text-gray-500">
          <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <p className="mt-2 text-lg font-semibold">Your generated images will appear here</p>
          <p className="text-sm">Enter a prompt and click "Generate Image" to start.</p>
        </div>
      )}
    </div>
  );
};

export default ImageDisplay;