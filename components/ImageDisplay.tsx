import React from 'react';
import Loader from './Loader';

interface ImageDisplayProps {
  imageUrls: string[] | null;
  isLoading: boolean;
  aspectRatio: '1:1' | '16:9' | '9:16';
  onDownloadClick: (imageUrl: string) => void;
  onEditClick: (imageUrl: string) => void;
  onRemoveObjectClick: (imageUrl: string) => void;
  onRemoveBackground: (imageUrl: string) => void;
  onUpscale: (imageUrl: string) => void;
  onAnimateClick: (imageUrl: string) => void;
  onExpandClick: (imageUrl: string) => void;
  hideActions?: boolean;
}

const ImageDisplay: React.FC<ImageDisplayProps> = ({ imageUrls, isLoading, aspectRatio, onDownloadClick, onEditClick, onRemoveObjectClick, onRemoveBackground, onUpscale, onAnimateClick, onExpandClick, hideActions = false }) => {
  const getGridColsClass = (count: number) => {
    if (count <= 1) return 'grid-cols-1';
    return 'grid-cols-2';
  }

  const getAspectRatioClass = (ratio: string) => {
    switch (ratio) {
      case '16:9':
        return 'aspect-video';
      case '9:16':
        return 'aspect-[9/16]';
      case '1:1':
      default:
        return 'aspect-square';
    }
  };

  return (
    <div className={`relative w-full ${getAspectRatioClass(aspectRatio)} bg-gray-800 border-2 border-dashed border-gray-700 rounded-lg flex items-center justify-center p-4 transition-all duration-300`}>
      {isLoading ? (
        <Loader />
      ) : imageUrls && imageUrls.length > 0 ? (
        <div className={`w-full h-full grid ${getGridColsClass(imageUrls.length)} gap-4`}>
          {imageUrls.map((url, index) => (
            <div key={index} className="relative group w-full h-full">
              <img
                src={url}
                alt={`Generated by AI ${index + 1}`}
                className="w-full h-full object-contain rounded-md"
              />
              {!hideActions && (
                <div className="absolute bottom-2 right-2 flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                  <button
                    onClick={() => onAnimateClick(url)}
                    className="bg-green-600 text-white font-semibold p-2 rounded-full shadow-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-green-500 transition-all"
                    aria-label={`Animate this image ${index + 1}`}
                    title="Animate This Image"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" />
                      <path d="M14.553 7.106A1 1 0 0116 8v4a1 1 0 01-1.447.894L12 11.118V8.882l2.553-1.776z" />
                    </svg>
                  </button>
                  <button
                    onClick={() => onExpandClick(url)}
                    className="bg-purple-600 text-white font-semibold p-2 rounded-full shadow-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-purple-500 transition-all"
                    aria-label={`Expand image ${index + 1}`}
                    title="Expand Image"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M3 3a1 1 0 011-1h4a1 1 0 110 2H5v2a1 1 0 11-2 0V4a1 1 0 011-1zm2 10H4a1 1 0 100 2h1v2a1 1 0 102 0v-3a1 1 0 00-1-1zm10-2h1a1 1 0 100-2h-1V9a1 1 0 10-2 0v3a1 1 0 001 1zm-2-8h4a1 1 0 011 1v4a1 1 0 11-2 0V5h-2a1 1 0 110-2z" clipRule="evenodd" />
                    </svg>
                  </button>
                  <button
                    onClick={() => onEditClick(url)}
                    className="bg-purple-600 text-white font-semibold p-2 rounded-full shadow-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-purple-500 transition-all"
                    aria-label={`Edit image ${index + 1}`}
                    title="Inpaint/Edit Image"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                      <path fillRule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clipRule="evenodd" />
                    </svg>
                  </button>
                  <button
                    onClick={() => onRemoveObjectClick(url)}
                    className="bg-purple-600 text-white font-semibold p-2 rounded-full shadow-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-purple-500 transition-all"
                    aria-label={`Remove an object from image ${index + 1}`}
                    title="Remove Object"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                    </svg>
                  </button>
                  <button
                    onClick={() => onRemoveBackground(url)}
                    className="bg-purple-600 text-white font-semibold p-2 rounded-full shadow-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-purple-500 transition-all"
                    aria-label={`Remove background from image ${index + 1}`}
                    title="Remove Background"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M5 2a1 1 0 011 1v1h1a1 1 0 010 2H6v1a1 1 0 01-2 0V6H3a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM12 2a1 1 0 01.967.744L14.146 7.2 17.5 9.134a1 1 0 010 1.732l-3.354 1.934L13 17.256A1 1 0 0112 18a1 1 0 01-.967-.744L9.854 12.8 6.5 10.866a1 1 0 010-1.732l3.354-1.934L11 2.744A1 1 0 0112 2z" clipRule="evenodd" />
                    </svg>
                  </button>
                  <button
                    onClick={() => onUpscale(url)}
                    className="bg-purple-600 text-white font-semibold p-2 rounded-full shadow-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-purple-500 transition-all"
                    aria-label={`Upscale image ${index + 1}`}
                    title="Upscale Image"
                  >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M5 2a1 1 0 011-1h1V.5a.5.5 0 011 0V1h2V.5a.5.5 0 011 0V1h1a1 1 0 011 1v1h.5a.5.5 0 010 1H13v2h.5a.5.5 0 010 1H13v1a1 1 0 01-1 1h-1v.5a.5.5 0 01-1 0V9H8v.5a.5.5 0 01-1 0V9H6a1 1 0 01-1-1V7h-.5a.5.5 0 010-1H5V5h-.5a.5.5 0 010-1H5V2zm4 5H7v1a1 1 0 001 1h1V7zm2 0h-1v2h1a1 1 0 001-1V7z" clipRule="evenodd" />
                          <path d="M2.5 1A1.5 1.5 0 001 2.5v11A1.5 1.5 0 002.5 15h11a1.5 1.5 0 001.5-1.5v-11A1.5 1.5 0 0013.5 1h-11zM2 2.5a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-11z" />
                      </svg>
                  </button>
                  <button
                    onClick={() => onDownloadClick(url)}
                    className="bg-indigo-600 text-white font-semibold p-2 rounded-full shadow-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500 transition-all"
                    aria-label={`Download image ${index + 1}`}
                    title="Download Image"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </button>
                </div>
              )}
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center text-gray-500">
          <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <p className="mt-2 text-lg font-semibold">Your generated images will appear here</p>
          <p className="text-sm">Enter a prompt and click "Generate Image" to start.</p>
        </div>
      )}
    </div>
  );
};

export default ImageDisplay;